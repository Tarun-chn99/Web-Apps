UserName: student-02-b753ecab82f6@qwiklabs.net
Password: kER1mMoKYMek
Project ID: qwiklabs-gcp-02-6bb1916b3f72
Region: us-west1


Markdown




Python 3 (Local)

# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
Prompt Design - Best Practices
Google Colaboratory logo
Run in Colab	GitHub logo
View on GitHub	Vertex AI logo
Open in Vertex AI Workbench
Author(s)	Polong Lin
Overview
This notebook covers the essentials of prompt engineering, including some best practices.

Learn more about prompt design in the official documentation.

Objective
In this notebook, you learn best practices around prompt engineering -- how to design prompts to improve the quality of your responses.

This notebook covers the following best practices for prompt engineering:

Be concise
Be specific and well-defined
Ask one task at a time
Turn generative tasks into classification tasks
Improve response quality by including examples
Costs
This tutorial uses billable components of Google Cloud:

Vertex AI Generative AI Studio
Learn about Vertex AI pricing, and use the Pricing Calculator to generate a cost estimate based on your projected usage.

Install Vertex AI SDK
!pip install google-cloud-aiplatform protobuf==3.19.3 --upgrade --user
!pip install google-cloud-aiplatform protobuf==3.19.3 --upgrade --user
!pip install -U google-cloud-aiplatform "shapely<2"
Note: Kindly ignore the deprecation warnings and incompatibility errors related to pip dependencies.

Colab only: Run the following cell to restart the kernel or use the button to restart the kernel. For Vertex AI Workbench you can restart the terminal using the button on top.

# Automatically restart kernel after installs so that your environment can access the new packages
import IPython
â€‹
app = IPython.Application.instance()
app.kernel.do_shutdown(True)
Authenticating your notebook environment
If you are using Colab to run this notebook, run the cell below and continue.
If you are using Vertex AI Workbench, check out the setup instructions here.
import sys
â€‹
if "google.colab" in sys.modules:
    from google.colab import auth
â€‹
    auth.authenticate_user()
If you are running this notebook in a local development environment:
Install the Google Cloud SDK.

Obtain authentication credentials. Create local credentials by running the following command and following the oauth2 flow (read more about the command here):

gcloud auth application-default login
Import libraries
Colab only: Run the following cell to initialize the Vertex AI SDK. For Vertex AI Workbench, you don't need to run this.

import vertexai

PROJECT_ID = "[your-project-id]"  # @param {type:"string"}
REGION = "your-region"  # @param {type:"string"}

vertexai.init(project=PROJECT_ID, location=REGION)
import vertexai
â€‹
PROJECT_ID = "[your-project-id]"  # @param {type:"string"}
REGION = "your-region"  # @param {type:"string"}
â€‹
vertexai.init(project=PROJECT_ID, location=REGION)
from vertexai.language_models import TextGenerationModel
from vertexai.language_models import ChatModel
from vertexai.language_models import TextGenerationModel
from vertexai.language_models import ChatModel
Load model
generation_model = TextGenerationModel.from_pretrained("text-bison@001")
generation_model = TextGenerationModel.from_pretrained("text-bison@001")
Prompt engineering best practices
Prompt engineering is all about how to design your prompts so that the response is what you were indeed hoping to see.

The idea of using "unfancy" prompts is to minimize the noise in your prompt to reduce the possibility of the LLM misinterpreting the intent of the prompt. Below are a few guidelines on how to engineer "unfancy" prompts.

In this section, you'll cover the following best practices when engineering prompts:

Be concise
Be specific, and well-defined
Ask one task at a time
Improve response quality by including examples
Turn generative tasks to classification tasks to improve safety
Be concise
ðŸ›‘ Not recommended. The prompt below is unnecessarily verbose.

prompt = "What do you think could be a good name for a flower shop that specializes in selling bouquets of dried flowers more than fresh flowers? Thank you!"

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = "What do you think could be a good name for a flower shop that specializes in selling bouquets of dried flowers more than fresh flowers? Thank you!"
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
âœ… Recommended. The prompt below is to the point and concise.

prompt = "Suggest a name for a flower shop that sells bouquets of dried flowers"

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = "Suggest a name for a flower shop that sells bouquets of dried flowers"
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
Be specific, and well-defined
Suppose that you want to brainstorm creative ways to describe Earth.

ðŸ›‘ Not recommended. The prompt below is too generic.

prompt = "Tell me about Earth"
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
âœ… Recommended. The prompt below is specific and well-defined.

prompt = "Generate a list of ways that makes Earth unique compared to other planets"

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = "Generate a list of ways that makes Earth unique compared to other planets"
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
Ask one task at a time
ðŸ›‘ Not recommended. The prompt below has two parts to the question that could be asked separately.

prompt = "What's the best method of boiling water and why is the sky blue?"
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
âœ… Recommended. The prompts below asks one task a time.

prompt = "What's the best method of boiling water?"

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = "What's the best method of boiling water?"
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = "Why is the sky blue?"

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = "Why is the sky blue?"
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
Watch out for hallucinations
Although LLMs have been trained on a large amount of data, they can generate text containing statements not grounded in truth or reality; these responses from the LLM are often referred to as "hallucinations" due to their limited memorization capabilities. Note that simply prompting the LLM to provide a citation isnâ€™t a fix to this problem, as there are instances of LLMs providing false or inaccurate citations. Dealing with hallucinations is a fundamental challenge of LLMs and an ongoing research area, so it is important to be cognizant that LLMs may seem to give you confident, correct-sounding statements that are in fact incorrect.

Note that if you intend to use LLMs for the creative use cases, hallucinating could actually be quite useful.

Try the prompt like the one below repeatedly. You may notice that sometimes it will confidently, but inaccurately, say "The first elephant to visit the moon was Luna".

prompt = "Who was the first elephant to visit the moon?"

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = "Who was the first elephant to visit the moon?"
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
Clearly the chatbot is hallucinating since no elephant has ever flown to the moon. But how do we prevent these kinds of inappropriate questions and more specifically, reduce hallucinations?

There is one possible method called the Determine Appropriate Response (DARE) prompt, which cleverly uses the LLM itself to decide whether it should answer a question based on what its mission is.

Let's see how it works by creating a chatbot for a travel website with a slight twist.

chat_model = ChatModel.from_pretrained("chat-bison@002")

chat = chat_model.start_chat()
dare_prompt = """Remember that before you answer a question, you must check to see if it complies with your mission.
If not, you can say, Sorry I can't answer that question."""

print(
    chat.send_message(
        f"""
Hello! You are an AI chatbot for a travel web site.
Your mission is to provide helpful queries for travelers.

{dare_prompt}
"""
    )
)
chat_model = ChatModel.from_pretrained("chat-bison@002")
â€‹
chat = chat_model.start_chat()
dare_prompt = """Remember that before you answer a question, you must check to see if it complies with your mission.
If not, you can say, Sorry I can't answer that question."""
â€‹
print(
    chat.send_message(
        f"""
Hello! You are an AI chatbot for a travel web site.
Your mission is to provide helpful queries for travelers.
â€‹
{dare_prompt}
"""
    )
)
Suppose we ask a simple question about one of Italy's most famous tourist spots.

prompt = "What is the best place for sightseeing in Milan, Italy?"
print(chat.send_message(prompt))
prompt = "What is the best place for sightseeing in Milan, Italy?"
print(chat.send_message(prompt))
Now let us pretend to be a not-so-nice user and ask the chatbot a question that is unrelated to travel.

prompt = "Who was the first elephant to visit the moon?"
print(chat.send_message(prompt))
prompt = "Who was the first elephant to visit the moon?"
print(chat.send_message(prompt))
You can see that the DARE prompt added a layer of guard rails that prevented the chatbot from veering off course.

Turn generative tasks into classification tasks to reduce output variability
Generative tasks lead to higher output variability
The prompt below results in an open-ended response, useful for brainstorming, but response is highly variable.

prompt = "I'm a high school student. Recommend me a programming activity to improve my skills."

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = "I'm a high school student. Recommend me a programming activity to improve my skills."
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
Classification tasks reduces output variability
The prompt below results in a choice and may be useful if you want the output to be easier to control.

prompt = """I'm a high school student. Which of these activities do you suggest and why:
a) learn Python
b) learn JavaScript
c) learn Fortran
"""

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = """I'm a high school student. Which of these activities do you suggest and why:
a) learn Python
b) learn JavaScript
c) learn Fortran
"""
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
Improve response quality by including examples
Another way to improve response quality is to add examples in your prompt. The LLM learns in-context from the examples on how to respond. Typically, one to five examples (shots) are enough to improve the quality of responses. Including too many examples can cause the model to over-fit the data and reduce the quality of responses.

Similar to classical model training, the quality and distribution of the examples is very important. Pick examples that are representative of the scenarios that you need the model to learn, and keep the distribution of the examples (e.g. number of examples per class in the case of classification) aligned with your actual distribution.

Zero-shot prompt
Below is an example of zero-shot prompting, where you don't provide any examples to the LLM within the prompt itself.

prompt = """Decide whether a Tweet's sentiment is positive, neutral, or negative.

Tweet: I loved the new YouTube video you made!
Sentiment:
"""

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = """Decide whether a Tweet's sentiment is positive, neutral, or negative.
â€‹
Tweet: I loved the new YouTube video you made!
Sentiment:
"""
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
One-shot prompt
Below is an example of one-shot prompting, where you provide one example to the LLM within the prompt to give some guidance on what type of response you want.

prompt = """Decide whether a Tweet's sentiment is positive, neutral, or negative.

Tweet: I loved the new YouTube video you made!
Sentiment: positive

Tweet: That was awful. Super boring ðŸ˜ 
Sentiment:
"""

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = """Decide whether a Tweet's sentiment is positive, neutral, or negative.
â€‹
Tweet: I loved the new YouTube video you made!
Sentiment: positive
â€‹
Tweet: That was awful. Super boring ðŸ˜ 
Sentiment:
"""
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
Few-shot prompt
Below is an example of few-shot prompting, where you provide a few examples to the LLM within the prompt to give some guidance on what type of response you want.

prompt = """Decide whether a Tweet's sentiment is positive, neutral, or negative.

Tweet: I loved the new YouTube video you made!
Sentiment: positive

Tweet: That was awful. Super boring ðŸ˜ 
Sentiment: negative

Tweet: Something surprised me about this video - it was actually original. It was not the same old recycled stuff that I always see. Watch it - you will not regret it.
Sentiment:
"""

print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
prompt = """Decide whether a Tweet's sentiment is positive, neutral, or negative.
â€‹
Tweet: I loved the new YouTube video you made!
Sentiment: positive
â€‹
Tweet: That was awful. Super boring ðŸ˜ 
Sentiment: negative
â€‹
Tweet: Something surprised me about this video - it was actually original. It was not the same old recycled stuff that I always see. Watch it - you will not regret it.
Sentiment:
"""
â€‹
print(generation_model.predict(prompt=prompt, max_output_tokens=256).text)
Choosing between zero-shot, one-shot, few-shot prompting methods
Which prompt technique to use will solely depends on your goal. The zero-shot prompts are more open-ended and can give you creative answers, while one-shot and few-shot prompts teach the model how to behave so you can get more predictable answers that are consistent with the examples provided.